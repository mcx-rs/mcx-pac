[env]
DEVICES = ['MCXN947', 'MCXN236', 'MCXA153', 'MCXA156', 'MCXA276']
USE_MIRROR_IN_CHINA = '1'

[tasks.pacgen]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! anyhow = "1"
//! glob = "0"
//! regex = "1"
//! log = "0"
//! env_logger = "0"
//! 
//! clap = { version = "4", features = ["derive"] }
//! quote = "1"
//! proc-macro2 = "1"
//! 
//! serde = "1"
//! serde_yaml = "=0.9.34-deprecated"
//! svd-parser = { git = "https://github.com/Dirbaio/svd.git", rev = "8426f3bb40dd2391e26cd087a0d6510fe21fdcbc", features = [
//!     "derive-from",
//!     "expand",
//! ] }
//! chiptool = { git = "https://github.com/embassy-rs/chiptool.git", rev = "63e36008ecbc1b68e49160703e256e2db7e40b89" }
//! ```
use anyhow::Result;
use chiptool::ir::IR;
use chiptool::transform::Transform;
use clap::{Parser, Subcommand};
use log::debug;
use quote::quote;

#[derive(Debug, serde::Deserialize)]
struct Config {
    includes: Option<Vec<String>>,
    transforms: Option<Vec<Transform>>,
}

fn apply<P: AsRef<std::path::Path>>(ir: &mut IR, p: P) -> Result<()> {
    let content = std::fs::read(&p)?;
    let config: Config = serde_yaml::from_slice(&content)?;

    if let Some(includes) = &config.includes {
        for include in includes {
            let subp = &p.as_ref().join(include);
            apply(ir, subp)?;
        }
    }

    if let Some(transforms) = &config.transforms {
        for transform in transforms {
            transform.run(ir)?;
        }
    }

    Ok(())
}

#[derive(Debug, Parser)]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Debug, Subcommand)]
enum Commands {
    Generate {
        #[arg(required = true)]
        svd: std::path::PathBuf,

        #[arg(required = true)]
        transform: std::path::PathBuf,

        #[arg(required = true)]
        output: std::path::PathBuf,
    },
}

fn main() -> Result<()> {
    env_logger::init();

    let args = Cli::parse();
    debug!("{:?}", args);

    let svd_parser_config = svd_parser::Config::default();
    let render_opts = chiptool::generate::Options {
        common_module: chiptool::generate::CommonModule::External(quote!(crate::common)),
    };

    match args.command {
        Commands::Generate {
            svd,
            transform,
            output,
        } => {
            std::fs::create_dir_all(&output)?;
            let content = std::fs::read_to_string(svd)?;
            let device = svd_parser::parse_with_config(&content, &svd_parser_config)?;
            let mut ir = chiptool::svd2ir::convert_svd(&device)?;
            apply(&mut ir, transform)?;

            let items = chiptool::generate::render(&mut ir, &render_opts)?;
            let path = output.join("device.rs");
            std::fs::write(path, items.to_string())?;

            let items =
                chiptool::generate::render_device_x(&ir, &ir.devices.values().next().unwrap())?;
            let path = output.join("device.x");
            std::fs::write(path, items.to_string())?;
        }
    }

    Ok(())
}
'''

[tasks.download_svds_unix]
script_runner = "bash"
script_extension = "sh"
script = '''
while IFS=';' read -ra DEVICES; do
    for DEVICE in "${DEVICES[@]}"; do
        if [ -f svds/$DEVICE.svd ]; then continue; fi
        download_url=$(curl -s https://api.github.com/repos/nxp-mcuxpresso/mcux-soc-svd/contents/$DEVICE | jq '.[0].download_url' | tr -d '"')
        save_path=svds/$DEVICE.svd
        # if [ $USE_MIRROR_IN_CHINA == '1' ]; then download_url=https://ghp.ci/$download_url; fi
        curl --output $save_path --progress-bar $download_url
    done
done <<< $DEVICES
'''

[tasks.download_svds_windows]
script_runner = "powershell"
script_extension = "ps1"
script = '''
$DEVICES = $env:DEVICES -Split ";"
foreach ($DEVICE in $DEVICES)
{
    if (Test-Path ./svds/$DEVICE.svd) { continue }
    $json = (curl.exe -s https://api.github.com/repos/nxp-mcuxpresso/mcux-soc-svd/contents/$DEVICE | ConvertFrom-Json)[0]
    $download_url = $json.download_url
    Write-Host "Saving $DEVICE.svd"
    $save_path = "svds/$DEVICE.svd"
    if ($env:USE_MIRROR_IN_CHINA -eq '1') { $download_url = "https://ghp.ci/$download_url" }
    curl.exe --output $save_path --progress-bar $download_url
}
'''
